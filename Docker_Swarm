#----------------------------------------------------------------------#
Docker Swarm :
#----------------------------------------------------------------------#

1. What is Docker Swarm

2. Why to use it

3. How to create and manage Docker Swarm

4. Create service on Docker Swarm

5. Scaling Services up and down

6. Features/Helpful Tips

Note : A Swarm is a group of machines that are running Docker and joined into a cluster.

#----------------------------------------------------------------------#


#----------------------------------------------------------------------#
Docker Swarm is a tool for Container Orchestration:
#----------------------------------------------------------------------#
Example : You have 100 containers

You need to do:
	- Health Check on every container
	- Ensure all containers are up on every system
	- Scaling the containers up or down depending on the load
	- Adding updates/Changes to all the containers

Orachestration : Managing and Controlling multiple docker containers as single service tools available : Docker Swarm, Kubernetes, Apache Mesos etc....	

#----------------------------------------------------------------------#
Pre-Requisites:

Docker 1.13 or later

Docker Machine 

$ docker -v
Docker version 18.09.0, build 4d60db4

$ docker-machine -v
docker-machine version 0.15.0, build b48dc28d

#----------------------------------------------------------------------#

# docker-machine --help

# docker-machine create --driver virtualbox manager1

# Create Docker Machines(To act as nodes for Docker Swarm)

# Create one machine as Manager and Others as Workers

For Windows : docker-machine create --driver hpyerv manager1

For Mac/Linux : docker-machine create --driver virtualbox manager1

Install virtualbox for MacOS : # brew install virtualbox

Note: While running the above command, if you come across any exception, then follow the below commands:

#----------------------------------------------------------------------#
STEP-1 : Create Docker Machines(To act as nodes for Docker Swarm)

$ docker-machine create --driver virtualbox manager1

$ docker-machine env manager1
export DOCKER_TLS_VERIFY="1"
export DOCKER_HOST="tcp://192.168.99.100:2376"
export DOCKER_CERT_PATH="/Users/keshavkummari/.docker/machine/machines/manager1"
export DOCKER_MACHINE_NAME="manager1"
# Run this command to configure your shell: 
# eval $(docker-machine env manager1)


$ docker-machine ls
NAME       ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER     ERRORS
manager1   -        virtualbox   Running   tcp://192.168.99.100:2376           v18.09.0 

$ docker-machine ip manager1
192.168.99.100

#----------------------------------------------------------------------#
STEP-2 : Create Workers :
#----------------------------------------------------------------------#
$ docker-machine create --driver virtualbox worker1

$ docker-machine env worker1
export DOCKER_TLS_VERIFY="1"
export DOCKER_HOST="tcp://192.168.99.101:2376"
export DOCKER_CERT_PATH="/Users/keshavkummari/.docker/machine/machines/worker1"
export DOCKER_MACHINE_NAME="worker1"
# Run this command to configure your shell: 
# eval $(docker-machine env worker1)

$ docker-machine ls
NAME       ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER     ERRORS
manager1   -        virtualbox   Running   tcp://192.168.99.100:2376           v18.09.0   
worker1    -        virtualbox   Running   tcp://192.168.99.101:2376           v18.09.0 

#----------------------------------------------------------------------#
STEP-3 : To SSH to Docker Manager or Worker :
#----------------------------------------------------------------------#

# docker-machine ssh manager1

# docker-machine ssh worker1

#----------------------------------------------------------------------#
STEP-4 : Initialize the Docker Swarm :
#----------------------------------------------------------------------#

# docker swarm init --advertise-addr MANAGER_IP 

# docker-machine ip manager1

Go to Manager1 :

# docker swarm init --advertise-addr 192.168.99.100


docker@manager1:~$ docker swarm init --advertise-addr 192.168.99.100
Swarm initialized: current node (60qs3ldthuwytuuw6f95ddmuo) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-24pgykev05pr4p4qctfcqwmeijhwmlvpmy9j1bnjjg2ttacszk-0cj7ow0x6t5ixm05jppm5lf4f 192.168.99.100:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

# docker node ls

docker@manager1:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
60qs3ldthuwytuuw6f95ddmuo *   manager1            Ready               Active              Leader              18.09.0

#----------------------------------------------------------------------#
STEP-5 : Join the Workers in the Swarm :
#----------------------------------------------------------------------#

Go to Swarm/Manager1 :

docker@manager1:~$ docker swarm join-token worker
To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-24pgykev05pr4p4qctfcqwmeijhwmlvpmy9j1bnjjg2ttacszk-0cj7ow0x6t5ixm05jppm5lf4f 192.168.99.100:2377


Now go to Worker1 and paste the command :

docker@worker1:~$ docker swarm join --token SWMTKN-1-24pgykev05pr4p4qctfcqwmeijhwmlvpmy9j1bnjjg2ttacszk-0cj7ow0x6t5ixm05jppm5lf4f 192.168.99.100:2377
This node joined a swarm as a worker.


docker@manager1:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
60qs3ldthuwytuuw6f95ddmuo *   manager1            Ready               Active              Leader              18.09.0
o0det6ypoqsefh8x0wg1moeod     worker1             Ready               Active                                  18.09.0


#----------------------------------------------------------------------#
STEP-6 : Check the Docker status :
#----------------------------------------------------------------------#
docker@manager1:~$ docker info

Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 0
Server Version: 18.09.0
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: bridge host macvlan null overlay
 Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
Swarm: active
 NodeID: 60qs3ldthuwytuuw6f95ddmuo
 Is Manager: true
 ClusterID: ns1rkaj9m95dmamc32c90az05
 Managers: 1
 Nodes: 2
 Default Address Pool: 10.0.0.0/8  
 SubnetSize: 24
 Orchestration:
  Task History Retention Limit: 5
 Raft:
  Snapshot Interval: 10000
  Number of Old Snapshots to Retain: 0
  Heartbeat Tick: 1
  Election Tick: 10
 Dispatcher:
  Heartbeat Period: 5 seconds
 CA Configuration:
  Expiry Duration: 3 months
  Force Rotate: 0
 Autolock Managers: false
 Root Rotation In Progress: false
 Node Address: 192.168.99.100
 Manager Addresses:
  192.168.99.100:2377
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e
runc version: 69663f0bd4b60df09991c08812a60108003fa340
init version: fec3683
Security Options:
 seccomp
  Profile: default
Kernel Version: 4.14.79-boot2docker
Operating System: Boot2Docker 18.09.0 (TCL 8.2.1)
OSType: linux
Architecture: x86_64
CPUs: 1
Total Memory: 989.4MiB
Name: manager1
ID: LL6W:RBFJ:LQ3N:3V3O:PPYJ:KRVY:D3XE:6GHZ:TD2Y:IUDP:TW7H:KQ3G
Docker Root Dir: /mnt/sda1/var/lib/docker
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
Labels:
 provider=virtualbox
Experimental: false
Insecure Registries:
 127.0.0.0/8
Live Restore Enabled: false
Product License: Community Engine

#----------------------------------------------------------------------#
STEP-7 : Run Containers on Docker Swarm :
#----------------------------------------------------------------------#

Go to Manager1 : 

# docker service create --replicas 2 -p 80:80 --name <any_name> <image_name>

# docker service create --replicas 2 -p 80:80 --name web1 nginx

docker@manager1:~$ docker service create --replicas 2 -p 80:80 --name web1 nginx
e1b86ffmzble5woxzs7x3bedv
overall progress: 2 out of 2 tasks 
1/2: running   [==================================================>] 
2/2: running   [==================================================>] 
verify: Service converged 


# docker service ls

docker@manager1:~$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
e1b86ffmzble        web1                replicated          2/2                 nginx:latest        *:30000->8080/tcp

# docker service ps web1

docker@manager1:~$ docker service ps web1
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
puhqbfhdkxb9        web1.1              nginx:latest        worker1             Running             Running 38 seconds ago                       
r8a357gkl5ht        web1.2              nginx:latest        manager1            Running             Running 40 seconds ago   

#----------------------------------------------------------------------#
STEP-8 : Scale Service up and Down :
#----------------------------------------------------------------------#

Go to Manager1 :

# docker service scale web1=4 

# docker service ps web1

#----------------------------------------------------------------------#
Scale Down :
#----------------------------------------------------------------------#

docker@manager1:~$ docker service scale web1=2
web1 scaled to 2
overall progress: 2 out of 2 tasks 
1/2: running   [==================================================>] 
2/2: running   [==================================================>] 
verify: Service converged 

docker@manager1:~$ docker service ls     
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
e1b86ffmzble        web1                replicated          2/2                 nginx:latest        *:30000->8080/tcp
dv9tdkqw7fa3        webserver1          replicated          2/2                 nginx:latest        *:80->80/tcp
wvqmywovts04        webserver2          replicated          2/2                 nginx:latest        *:81->81/tcp
docker@manager1:~$ 
docker@manager1:~$ docker service ps web1
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
puhqbfhdkxb9        web1.1              nginx:latest        worker1             Running             Running 20 minutes ago                       
r8a357gkl5ht        web1.2              nginx:latest        manager1            Running             Running 20 minutes ago                       
docker@manager1:~$ 

#----------------------------------------------------------------------#
STEP-9 : Inspect the nodes
#----------------------------------------------------------------------#
Go to Manager1 :

# docker node inspect nodename

# docker node inspect self

# docker node inspect worker1

#----------------------------------------------------------------------#
STEP-10 : Update the Service :
#----------------------------------------------------------------------#

Go to Manager1:

# docker service update --image nginx:1.14.0 web1

docker@manager1:~$ docker service update --image nginx:1.14.0 web1
web1
overall progress: 2 out of 2 tasks 
1/2: running   [==================================================>] 
2/2: running   [==================================================>] 
verify: Service converged 
docker@manager1:~$ 
docker@manager1:~$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
e1b86ffmzble        web1                replicated          2/2                 nginx:1.14.0        *:30000->8080/tcp
dv9tdkqw7fa3        webserver1          replicated          2/2                 nginx:latest        *:80->80/tcp
wvqmywovts04        webserver2          replicated          2/2                 nginx:latest        *:81->81/tcp


docker@manager1:~$ docker service ps web1
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                 ERROR               PORTS
bpdn5pgkkktl        web1.1              nginx:1.14.0        worker1             Running             Running 29 seconds ago                            
puhqbfhdkxb9         \_ web1.1          nginx:latest        worker1             Shutdown            Shutdown 47 seconds ago                           
d29dbntomwtp        web1.2              nginx:1.14.0        manager1            Running             Running 51 seconds ago                            
r8a357gkl5ht         \_ web1.2          nginx:latest        manager1            Shutdown            Shutdown about a minute ago  


#----------------------------------------------------------------------#
STEP-11 : Shutdown the node :
#----------------------------------------------------------------------#

Go to Manager1 :

# docker node update --availability drain worker1

docker@manager1:~$ docker node update --availability drain worker1
worker1
docker@manager1:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
60qs3ldthuwytuuw6f95ddmuo *   manager1            Ready               Active              Leader              18.09.0
o0det6ypoqsefh8x0wg1moeod     worker1             Ready               Drain                                   18.09.0


#----------------------------------------------------------------------#
STEP-12 : Remove the Service :
#----------------------------------------------------------------------#
Go to Manager1:

docker@manager1:~$ docker service rm web1
web1
docker@manager1:~$ 
docker@manager1:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
60qs3ldthuwytuuw6f95ddmuo *   manager1            Ready               Active              Leader              18.09.0
o0det6ypoqsefh8x0wg1moeod     worker1             Ready               Drain                                   18.09.0


Go to Base Machine :

$ docker-machine stop worker1

# docker service rm serviceName

$ docker-machine rm worker1
About to remove worker1
WARNING: This action will delete both local reference and remote instance.
Are you sure? (y/n): y
Successfully removed worker1

# docker swarm leave : To leave the Swarm

# docker-machine stop machineName : To stop the machine

# docker-machine rm machineName : To Remove the Machine

#----------------------------------------------------------------------#