
Install Kubernetes(k8s) on CentOS-7/RHEL-7 using Vagrant on MacOS


Kubernetes is a cluster and orchestration engine for docker containers. In other words Kubernetes is  an open source software or tool which is used to orchestrate and manage docker containers in cluster environment. Kubernetes is also known as k8s and it was developed by Google and donated to “Cloud Native Computing foundation”

In Kubernetes setup we have one master node and multiple nodes. Cluster nodes is known as worker node or Minion. From the master node we manage the cluster and its nodes using ‘kubeadm‘ and ‘kubectl‘  command.

Kubernetes can be installed and deployed using following methods:

Minikube ( It is a single node kubernetes cluster)
Kops ( Multi node kubernetes setup into AWS )
Kubeadm ( Multi Node Cluster in our own premises)

In this article we will install latest version of Kubernetes 1.7 on CentOS 7 / RHEL 7 with kubeadm utility. 
In my setup I am taking three CentOS 7 servers with minimal installation. 

One server will acts master node and rest two servers will be minion or worker nodes.


On the Master Node following components will be installed :

API Server  – It provides kubernetes API using Jason / Yaml over http, states of API objects are stored in etcd
Scheduler  – It is a program on master node which performs the scheduling tasks like launching containers in worker nodes based on resource availability
Controller Manager – Main Job of Controller manager is to monitor replication controllers and create pods to maintain desired state.
etcd – It is a Key value pair data base. It stores configuration data of cluster and cluster state.
Kubectl utility – It is a command line utility which connects to API Server on port 6443. It is used by administrators to create pods, services etc.

On Worker Nodes following components will be installed :

Kubelet – It is an agent which runs on every worker node, it connects to docker  and takes care of creating, starting, deleting containers.
Kube-Proxy – It routes the traffic to appropriate containers based on ip address and port number of the incoming request. In other words we can say it is used for port translation.
Pod – Pod can be defined as a multi-tier or group of containers that are deployed on a single worker node or docker host.


Installations Steps of Kubernetes 1.7 on CentOS 7 / RHEL 7
Perform the following steps on Master Node

Step 1: Disable SELinux & setup firewall rules
Login to your kubernetes master node and set the hostname and disable selinux using following commands

Step 1: Disable SELinux & setup firewall rules
Login to your kubernetes master node and set the hostname and disable selinux using following commands

# hostnamectl set-hostname 'k8s-master'
# exec bash
# setenforce 0
# sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

Set the following firewall rules:

[root@k8s-master ~]# firewall-cmd --permanent --add-port=6443/tcp
[root@k8s-master ~]# firewall-cmd --permanent --add-port=2379-2380/tcp
[root@k8s-master ~]# firewall-cmd --permanent --add-port=10250/tcp
[root@k8s-master ~]# firewall-cmd --permanent --add-port=10251/tcp
[root@k8s-master ~]# firewall-cmd --permanent --add-port=10252/tcp
[root@k8s-master ~]# firewall-cmd --permanent --add-port=10255/tcp
[root@k8s-master ~]# firewall-cmd --reload
[root@k8s-master ~]# modprobe br_netfilter
[root@k8s-master ~]# echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

Note: In case you don’t have your own dns server then update /etc/hosts file on master and worker nodes

192.168.1.30 k8s-master
192.168.1.40 worker-node1
192.168.1.50 worker-node2

Step 2: Configure Kubernetes Repository
Kubernetes packages are not available in the default CentOS 7 & RHEL 7 repositories, Use below command to configure its package repositories.

[root@k8s-master ~]# cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
         https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF 

Step 3: Install Kubeadm and Docker
Once the package repositories are configured, run the beneath command to install kubeadm and docker packages.

[root@k8s-master ~]# yum install kubeadm docker -y

Start and enable kubectl and docker service

[root@k8s-master ~]# systemctl restart docker && systemctl enable docker
[root@k8s-master ~]# systemctl  restart kubelet && systemctl enable kubelet

Step 4: Initialize Kubernetes Master with ‘kubeadm init’
Run the beneath command to  initialize and setup kubernetes master.

[root@k8s-master ~]# kubeadm init

As we can see in the output that kubernetes master has been initialized successfully. 

[root@k8s-master ~]# mkdir -p $HOME/.kube
[root@k8s-master ~]# cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
[root@k8s-master ~]# chown $(id -u):$(id -g) $HOME/.kube/config


Step 5: Deploy pod network to the cluster

[root@k8s-master ~]# kubectl get nodes

[root@k8s-master ~]# kubectl  get pods  --all-namespaces

Try to run below commands to get status of cluster and pods.

To make the cluster status ready and kube-dns status running, deploy the pod network so that containers of different host communicated each other.  POD network is the overlay network between the worker nodes.

Run the beneath command to deploy network.

[root@k8s-master ~]# export kubever=$(kubectl version | base64 | tr -d '\n')

[root@k8s-master ~]# kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$kubever"

Now run the following commands to verify the status

[root@k8s-master ~]# kubectl get nodes

[root@k8s-master ~]# kubectl  get pods  --all-namespaces

Now let’s add worker nodes to the Kubernetes master nodes.

Perform the following steps on each worker node
Step 1: Disable SELinux & configure firewall rules on both the nodes
Before disabling SELinux set the hostname on the both nodes as ‘worker-node1’ and ‘worker-node2’ respectively

# setenforce 0
# sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux
# firewall-cmd --permanent --add-port=10250/tcp
# firewall-cmd --permanent --add-port=10255/tcp
# firewall-cmd --permanent --add-port=30000-32767/tcp
# firewall-cmd --permanent --add-port=6783/tcp
# firewall-cmd  --reload
# echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables


Step 2: Configure Kubernetes Repositories on both worker nodes
~]# cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF


Step 3: Install kubeadm and docker package on both nodes

Node-1:
[root@worker-node1 ~]# yum  install kubeadm docker -y

Node-2:
[root@worker-node2 ~]# yum  install kubeadm docker -y

Start and enable docker service

Node-1:
[root@worker-node1 ~]# systemctl restart docker && systemctl enable docker

Node-2:
[root@worker-node2 ~]# systemctl restart docker && systemctl enable docker


Step 4: Now Join worker nodes to master node
To join worker nodes to Master node, a token is required. Whenever kubernetes master initialized , 
then in the output we get command and token.  Copy that command and run on both nodes.

[root@worker-node1 ~]# kubeadm join --token a3bd48.1bc42347c3b35851 192.168.1.30:6443


Now verify Nodes status from master node using kubectl command

[root@k8s-master ~]# kubectl get nodes

[root@k8s-master ~]# kubectl  get pods  --all-namespaces

#---------------------------------------------------------------------------------#
Practical Steps: 
#---------------------------------------------------------------------------------#
On MacOS/Windows open Terminal/Cmder/Gitbash and Create 3 terminals as below:

Terminal-0 : k8s-master 
Terminal-1 : k8s-node1
Terminal-2 : k8s-node2 

STEP-1 : Go to Terminal and Create a directory/folder:

Check current working directory/folder:
$ pwd
/Users/keshavkummari

Create a directory/folder:
$ mkdir k8s-workstation

Check the directory/folder status:
$ ls -ld k8s-workstation/

Navigate inside the directory/folder:
$ cd k8s-workstation/

Check current working directory/folder status:
$ pwd
/Users/keshavkummari/k8s-workstation

Create a Sub-Directory/Folder:
$ mkdir k8s-master

Check the Directory Status:
$ ls -lrt
drwxr-xr-x  2 keshavkummari  staff  64 Dec 14 10:59 k8s-master

Go to Terminal-1 and Create k8s-node1 Sub-Directory/Folder:
$ mkdir k8s-node1

Check the Directory Status:
$ ls -lrt
drwxr-xr-x  2 keshavkummari  staff  64 Dec 14 10:59 k8s-master
drwxr-xr-x  2 keshavkummari  staff  64 Dec 14 11:00 k8s-node1

Go to Terminal-2 and Create k8s-node1 Sub-Directory/Folder:
$ mkdir k8s-node2

Check the Directory Status:
$ ls -lrt
drwxr-xr-x  2 keshavkummari  staff  64 Dec 14 10:59 k8s-master
drwxr-xr-x  2 keshavkummari  staff  64 Dec 14 11:00 k8s-node1
drwxr-xr-x  2 keshavkummari  staff  64 Dec 14 11:02 k8s-node2

Go to all the 3 terminals and creating a CentOS 7 guest machines:


$ cd k8s-master/
$ pwd
/Users/keshavkummari/k8s-workstation/k8s-master
$ ls -lrt
$ 
$ vagrant box add centos/7
/opt/vagrant/embedded/gems/2.2.1/gems/vagrant-2.2.1/lib/vagrant/util/which.rb:37: warning: Insecure world writable dir /Users/keshavkummari in PATH, mode 040777
==> box: Loading metadata for box 'centos/7'
    box: URL: https://vagrantcloud.com/centos/7
This box can work with multiple providers! The providers that it
can work with are listed below. Please review the list and choose
the provider you will be working with.

1) hyperv
2) libvirt
3) virtualbox
4) vmware_desktop

Enter your choice: 3
==> box: Adding box 'centos/7' (v1811.02) for provider: virtualbox
    box: Downloading: https://vagrantcloud.com/centos/boxes/7/versions/1811.02/providers/virtualbox.box
    box: Download redirected to host: cloud.centos.org
==> box: Successfully added box 'centos/7' (v1811.02) for 'virtualbox'!


$ vagrant init --minimal
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
$ ls -lrt
total 8
-rw-r--r--  1 keshavkummari  staff  64 Dec 14 11:39 Vagrantfile
$ 

$ cat Vagrantfile 
$samplescript = <<SCRIPT
apt-get install apache2
systemctl enable apache2
systemctl start apache2
echo "<html><body bgcolor="olive"><h1>K8S</h1></body></html>" >> /var/www/html/index.html
SCRIPT

Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "master.kk.com"
  config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.provision "shell", inline: $samplescript
    
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
    vb.cpus = "2"
  end
end



k82-node1.kk.com

$ cat Vagrantfile 
$samplescript = <<SCRIPT
apt-get install apache2
systemctl enable apache2
systemctl start apache2
echo "<html><body bgcolor="olive"><h1>K8S Node1</h1></body></html>" >> /var/www/html/index.html
SCRIPT

Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "node1.kk.com"
  config.vm.network "private_network", ip: "192.168.33.11"
  config.vm.provision "shell", inline: $samplescript
    
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
    vb.cpus = "2"
  end
end


$ cat Vagrantfile 
$samplescript = <<SCRIPT
apt-get install apache2
systemctl enable apache2
systemctl start apache2
echo "<html><body bgcolor="olive"><h1>K8S Node-2</h1></body></html>" >> /var/www/html/index.html
SCRIPT

Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "node2.kk.com"
  config.vm.network "private_network", ip: "192.168.33.12"
  config.vm.provision "shell", inline: $samplescript
    
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
    vb.cpus = "2"
  end
end

Kuberentes on Ubuntu:

3 Ubuntu Servers on MacOS/Windows : 

Enable Docker Repository part of 3 servers

1. master :

Docker Repository:
# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

Add Kubernetes GPG Key and Repository in all 3 server :

# curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

# cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

Install Docker, Kubeadm, Kubelet, and Kubectl on all three servers.

# sudo apt-get update
# sudo apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu kubelet=1.12.2-00 kubeadm=1.12.2-00 kubectl=1.12.2-00
# sudo apt-mark hold docker-ce kubelet kubeadm kubectl

2. node1 :

Docker Repository:
# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

Add Kubernetes GPG Key and Repository in all 3 server :

# curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

# cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

Install Docker, Kubeadm, Kubelet, and Kubectl on all three servers.

# sudo apt-get update
# sudo apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu kubelet=1.12.2-00 kubeadm=1.12.2-00 kubectl=1.12.2-00
# sudo apt-mark hold docker-ce kubelet kubeadm kubectl

kubeadm join 172.31.25.235:6443 --token vnbgfj.3ylf6gdkpbm6dt87 --discovery-token-ca-cert-hash sha256:a85a57a660ba4113a15ab815632f745f8e78b5cf30ff4921723841dccaca8216


3. node2 :

Docker Repository:
# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

Add Kubernetes GPG Key and Repository in all 3 server :

# curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
# curl -s https://packages.cloud.google.com/apt/doc//apt-key.gpg | sudo apt-key add -

# cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

Install Docker, Kubeadm, Kubelet, and Kubectl on all three servers.

# sudo apt-get update
# sudo apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu kubelet=1.12.2-00 kubeadm=1.12.2-00 kubectl=1.12.2-00
# sudo apt-mark hold docker-ce kubelet kubeadm kubectl


# kubeadm join 172.31.25.235:6443 --token vnbgfj.3ylf6gdkpbm6dt87 --discovery-token-ca-cert-hash sha256:a85a57a660ba4113a15ab815632f745f8e78b5cf30ff4921723841dccaca8216
