#------------------------------------------------------------------------------#
keshav.kummari@gmail.com
#------------------------------------------------------------------------------#
Docker Overview :
#------------------------------------------------------------------------------#
Docker is a container management service.

The keywords of Docker are develop, ship and run anywhere.

The whole idea of Docker is for developers to easily develop applications,

ship them into containers which can then be deployed anywhere.

The initial release of Docker was in March 2013 and since then,
it has become the buzzword for modern world development,
especially in the face of Agile-based projects.

#------------------------------------------------------------------------------#
Features of Docker :
#------------------------------------------------------------------------------#
Docker has the ability to reduce the size of development by providing a smaller
footprint of the operating system via containers.

With containers, it becomes easier for teams across different units,
such as development, QA and Operations to work seamlessly across applications.

You can deploy Docker containers anywhere, on any physical and virtual machines
and even on the cloud.

Since Docker containers are pretty lightweight, they are very easily scalable.

#------------------------------------------------------------------------------#
Components of Docker :
#------------------------------------------------------------------------------#
Docker has the following components

1. MACOS : It allows one to run Docker containers on the Mac OS.

2. Linux − It allows one to run Docker containers on the Linux OS.

3. Windows − It allows one to run Docker containers on the Windows OS.

4. Docker Engine − It is used for building Docker images and creating Docker containers.

5. Docker Hub − This is the registry which is used to host various Docker images.

6. Docker Compose − This is used to define applications using multiple Docker containers.

We will discuss all these components in detail in the subsequent chapters.

The official site for Docker is https://www.docker.com/
#------------------------------------------------------------------------------#
Install Docker and Learn Basic Container Manipulation in CentOS and RHEL 7/6

Step 1: Install and Configure Docker

$ cat docker.repo
[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/7/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg




1. Docker binaries are incorporated into RHEL/CentOS 7 extras repositories

Install Docker on RHEL and CentOS 7
# yum install docker

Install Docker on RHEL and CentOS 6
# yum install epel-release
# yum install docker-io


2. After, Docker package has been installed, start the daemon, check its status and enable it system wide using the below commands:

On RHEL/CentOS 7
# systemctl start docker
# systemctl status docker
# systemctl enable docker


On RHEL/CentOS 6
# service docker start
# service docker status
# chkconfig docker on

3. Finally, run a container test image to verify if Docker works properly, by issuing the following command:

# docker run hello-world

If you can see the below message, then everything is in the right place.
"Hello from Docker. This message shows that your installation appears to be working correctly."


4. Now, you can run a few basic Docker commands to get some info about Docker:

For system-wide information on Docker
# docker info

For Docker version
# docker version

5. To get a list of all available Docker commands type docker on your console.

# docker

Step 2: Download a Docker Image

6. In order to start and run a Docker container, first an image must be downloaded from Docker Hub on your host. Docker Hub offers a great deal of free images from its repositories.

To search for a Docker image, CentOS for instance, issue the following command:

# docker search centos

7. After you decided on what image you want to run based on your needs, download it locally by running the below command (in this case an CentOS image is downloaded and used):

# docker pull centos


8. To list all the available Docker images on your host issue the following command:

# docker images


9. If you don’t need a Docker image anymore and you want to remove it from the host issue the following command:

# docker rmi centos


Step 3: Run a Docker Container

When you execute a command against an image you basically obtain a container. After the command that is executing into container ends, the container stops (you get a non-running or exited container). If you run another command into the same image again a new container is created and so on.

All the containers created will remain on the host filesystem until you choose to delete them by using the  docker rm command.

10. In order to create and run a container, you need to run a command into a downloaded image, in this case CentOS, so a basic command would be to display the distribution version file inside the container using cat command, as in the following example:


# docker run centos cat /etc/issue

# cat /etc/issue

# docker run centos cat /etc/issue

The above command is divided as follows:

# docker run [local image] [command to run into container]


11. To run one of the containers again with the command that was executed to create it, first you must get the container ID (or the name automatically generated by Docker) by issuing the below command, which displays a list of the running and stopped (non-running) containers:

# docker ps -l


12. Once the container ID has been obtained, you can start the container again with the command that was used to create it, by issuing the following command:

# docker start c629b7d70666


Here, the string c629b7d70666 represents the container ID.

# docker ps -l

# docker start c629b7d70666

13. In case the container is running state, you can get it’s ID by issuing docker ps command. To stop the running container issue docker stop command by specifying the container ID or auto-generated name.

# docker stop <container_name>
# docker ps


14. A more elegant alternative so you don’t have to remember the container ID would be to allocate a unique name for every container you create by using the --name option on command line, as in the following example:

# docker run --name myname  centos cat /etc/centos-release

Example :
/etc/centos-release
/etc/os-release
/etc/redhat-release
/etc/system-release


15. Then, using the name that you allocated for the container, you can manipulate container (start, stop, remove, top, stats) further just by addressing its name, as in the below examples:

# docker start myname
# docker stats myname
# docker top myname

Be aware that some of the above commands might display no output if the process of command that was used to create the container finishes. When the process that runs inside the container finishes, the container stops.


Step 4: Run an Interactive Session into a Container
16. In order to interactively connect into a container shell session, and run commands as you do on any other Linux session, issue the following command:

# docker run -it centos bash

The above command is divided as follows:

-i is used to start an interactive session.
-t allocates a tty and attaches stdin and stdout.
centos is the image that we used to create the container.
bash (or /bin/bash) is the command that we are running inside the centos container.

# ps -aux

# uname -a

# w

# cat /etc/*-releases

# exit

17. To quit and return to host from the running container session you must type exit command. The exit command terminates all the container processes and stops it.


18. If you’re interactively logged on container terminal prompt and you need to keep the container in running state but exit from the interactive session, you can quit the console and return to host terminal by pressing Ctrl+p and Ctrl+q keys.

# Ctrl+p  and Ctrl+q

# docket ps

To go back to the docket container:
# docket attach <container_id>

# docket ps

19. To reconnect to the running container you need the container ID or name. Issue docker ps command to get the ID or name and, then, run docker attach command by specifying container ID or name, as illustrated in the image above:

# docker attach <container id>


20. To stop a running container from the host session issue the following command:

# docker kill <container id>

#------------------------------------------------------------------------------#
Docker ToolBox
#------------------------------------------------------------------------------#

Docker ToolBox has been designed for older versions of Windows,
such as Windows 8.1 and Windows 7.

You need to have the following configuration in order to install Docker for Windows.

System Requirements
Windows OS	Windows 7 , 8, 8.1
Memory	2 GB RAM (recommended)
Virtualisation	This should be enabled.

https://www.docker.com/products/docker-toolbox
#------------------------------------------------------------------------------#
Docker for Windows
#------------------------------------------------------------------------------#

System Requirements
Windows OS	Windows 10 64 bit
Memory	2 GB RAM (recommended)

https://docs.docker.com/docker-for-windows/

#------------------------------------------------------------------------------#
Docker Version
#------------------------------------------------------------------------------#

To see Docker installed status :
# docker version

To see detailed information on the Docker service:
# docker info

To Test Docker :
# docker run

To Run a Docker image:
# docker run hello-world

If you want to run the Ubuntu OS on Windows,
you can download the Ubuntu Image using the following command :

# docker run –it Ubuntu bash

it : interactive mode

#------------------------------------------------------------------------------#
Docker - Hub :
#------------------------------------------------------------------------------#
Docker Hub is a registry service on the cloud that allows you to download Docker
images that are built by other communities.

You can also upload your own Docker built images to Docker hub.

https://hub.docker.com/


Download the Jenkins Image from Repository:
# docker pull jenkins

Run the Docker Container :
# docker run -p 8080:8080 -p 50000:50000 jenkins


#------------------------------------------------------------------------------#
Docker - Images :
#------------------------------------------------------------------------------#
In Docker, everything is based on Images.

An image is a combination of a file system and parameters.

Run a CentOS image :
# docker run centos –it /bin/bash
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Displaying Docker Images :
#------------------------------------------------------------------------------#
To see the list of Docker images on the system:

# docker images

From the above output:

TAG − This is used to logically tag images.

Image ID − This is used to uniquely identify the image.

Created − The number of days since the image was created.

Virtual Size − The size of the image.
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Downloading Docker Images :
#------------------------------------------------------------------------------#
Images can be downloaded from Docker Hub using the Docker run command.

# docker run <image_name>

# docker run centos

#------------------------------------------------------------------------------#
Removing Docker Images :
#------------------------------------------------------------------------------#
To remove docker images from the system:
# docker rmi ImageID

# docker rmi 78663ekhf98

#------------------------------------------------------------------------------#
List only Image ID:
#------------------------------------------------------------------------------#
# docker images -q

q − It tells the Docker command to return the Image ID’s only.
#------------------------------------------------------------------------------#
docker inspect :
#------------------------------------------------------------------------------#
To see the details of an image or container.

# docker inspect Repository

Repository − This is the name of the Image.

# docker inspect jenkins
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Docker - Containers :
#------------------------------------------------------------------------------#
Containers are instances of Docker images that can be run using the Docker run command.

The basic purpose of Docker is to run containers.

#------------------------------------------------------------------------------#
Running a Container :
#------------------------------------------------------------------------------#
Running of containers is managed with the Docker run command.

To run a container in an interactive mode, first launch the Docker container.

# docker run –it centos /bin/bash
#------------------------------------------------------------------------------#
Listing of Containers :
#------------------------------------------------------------------------------#
To check list of Containers on system :

# docker ps

# docker ps -a
This command is used to list all of the containers on the system

─a − It tells the docker ps command to list all of the containers on the system.
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
docker history :
#------------------------------------------------------------------------------#
With this command, you can see all the commands that were run with an image via a container.

# docker history ImageID

# docker history centos
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Docker - Working with Containers
#------------------------------------------------------------------------------#
# docker top
With this command, you can see the top processes within a container.

# docker top ContainerID

#------------------------------------------------------------------------------#
To stop the docker Container :
#------------------------------------------------------------------------------#
# docker stop ContainerID

#------------------------------------------------------------------------------#
To Delete a Container:
#------------------------------------------------------------------------------#
# docker rm ContainerID

#------------------------------------------------------------------------------#
To Check the Statistics of an Running Container:
#------------------------------------------------------------------------------#
# docker stats ContainerID

It'll show the CPU and Memory utilization of the Container.

#------------------------------------------------------------------------------#
Attach to a running Container :
#------------------------------------------------------------------------------#
# docker attach ContainerID

Once you have attached to the Docker container,
you can run the above command to see the process utilization in that Docker container.

# docker stats ContainerID
#------------------------------------------------------------------------------#
To pause the running processes in a specific container:
#------------------------------------------------------------------------------#
# docker pause ContainerID

#------------------------------------------------------------------------------#
Unpause the processes in a running container :
#------------------------------------------------------------------------------#
# docker unpause ContainerID

#------------------------------------------------------------------------------#
To kill running containers :
#------------------------------------------------------------------------------#
# docker kill ContainerID

#------------------------------------------------------------------------------#
Docker – Container Lifecycle :
#------------------------------------------------------------------------------#
The following illustration explains the entire lifecycle of a Docker container.

Initially, the Docker container will be in the created state.

Then the Docker container goes into the running state when the Docker run command is used.

The Docker kill command is used to kill an existing Docker container.

The Docker pause command is used to pause an existing Docker container.

The Docker stop command is used to pause an existing Docker container.

The Docker run command is used to put a container back from a stopped state to a running state.
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Docker - Architecture :
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
The standard and traditional architecture of virtualization :
#------------------------------------------------------------------------------#

The server is the physical server that is used to host multiple virtual machines.

The Host OS is the base machine such as Linux or Windows.

The Hypervisor is either VMWare or Windows Hyper V that is used to host virtual machines.

You would then install multiple operating systems as virtual machines on top of the existing hypervisor as Guest OS.

You would then host your applications on top of each Guest OS.

#------------------------------------------------------------------------------#
New generation of virtualization that is enabled via Dockers :
#------------------------------------------------------------------------------#
Let’s have a look at the various layers.

The server is the physical server that is used to host multiple virtual machines.
So this layer remains the same.

The Host OS is the base machine such as Linux or Windows. So this layer remains the same.

Now comes the new generation which is the Docker engine.

This is used to run the operating system which earlier used to be virtual machines as Docker containers.

All of the Apps now run as Docker containers.

The clear advantage in this architecture is that you don’t need to have extra
hardware for Guest OS. Everything works as Docker containers.
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Docker - Container and Hosts :
#------------------------------------------------------------------------------#
The good thing about the Docker engine is that it is designed to work on various operating systems.

#------------------------------------------------------------------------------#
Docker - Configuring :
#------------------------------------------------------------------------------#
# service docker status

# service docker stop

# service docker status
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Docker - Containers and Shells :
#------------------------------------------------------------------------------#
By default, when you launch a container,
you will also use a shell command while launching the container as shown below.

# docker run –it centos /bin/bash

We used this command to create a new container and then used the Ctrl+P+Q
command to exit out of the container.

It ensures that the container still exists even after we exit from the container.

We can verify that the container still exists with the Docker ps command.

If we had to exit out of the container directly, then the container itself would be destroyed.

Now there is an easier way to attach to containers and exit them cleanly
without the need of destroying them. One way of achieving this is by using the nsenter command.

Before we run the nsenter command, you need to first install the nsenter image.

# docker run --rm -v /usr/local/bin:/target jpetazzo/nsenter

Before we use the nsenter command, we need to get the Process ID of the container,
because this is required by the nsenter command.

We can get the Process ID via the Docker inspect command and filtering it via the Pid.

# docker inspect <container_id> | grep Pid

nsenter
This method allows one to attach to a container without exiting the container.

Syntax
nsenter –m –u –n –p –i –t containerID command

Options
-u is used to mention the Uts namespace

-m is used to mention the mount namespace

-n is used to mention the network namespace

-p is used to mention the process namespace

-i s to make the container run in interactive mode.

-t is used to connect the I/O streams of the container to the host OS.

containerID − This is the ID of the container.

Command − This is the command to run within the container.

# sudo nsenter –m –u –n –p –i –t <PID> /bin/bash

#------------------------------------------------------------------------------#
Docker - File :
#------------------------------------------------------------------------------#

Docker gives you the capability to create your own Docker images,
and it can be done with the help of Docker Files.

A Docker File is a simple text file with instructions on how to build your images.

The following steps explain how you should go about creating a Docker File.

Step 1 − Create a file called Docker File and edit it using vim.

Please note that the name of the file has to be "Dockerfile" with "D" as capital.

STEP-1 : Create a Docker file i.e. "Dockerfile"

# vi Dockerfile

Build your Docker File using the following instructions.

#This is a sample Image
FROM ubuntu
MAINTAINER keshav.kummari@gmail.com

RUN apt-get update
RUN apt-get install –y nginx
CMD [“echo”,”Image created”]


The following points need to be noted about the above file :

The first line "#This is a sample Image" is a comment.

You can add comments to the Docker File with the help of the # command

The next line has to start with the FROM keyword.
It tells docker, from which base image you want to base your image from.

In our example, we are creating an image from the ubuntu image.

The next command is the person who is going to maintain this image.

Here you specify the MAINTAINER keyword and just mention the email ID.

The RUN command is used to run instructions against the image.
In our case, we first update our Ubuntu system and then install the nginx server on our ubuntu image.

The last command is used to display a message to the user.

#------------------------------------------------------------------------------#
Docker - Building Files :
#------------------------------------------------------------------------------#
It’s now time to build the Docker File:
# docker build

Build your own images :
# docker build  -t ImageName:TagName dir

-t − is to mention a tag to the image

ImageName − This is the name you want to give to your image.

TagName − This is the tag you want to give to your image.

Dir − The directory where the Docker File is present.

# docker build -t dev:1.0 .

# docker images

# docker ps

#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Docker - Public Repositories :
#------------------------------------------------------------------------------#
Public repositories can be used to host Docker images which can be used by everyone else.

An example is the images which are available in Docker Hub.

Most of the images such as Centos, Ubuntu, and Jenkins are all publicly available for all.

We can also make our images available by publishing it to the public repository on Docker Hub.

Create a Dockerfile and Build and push to Docker Hub:

# vi Dockerfile

Build your Docker File using the following instructions.

#This is a sample Image
FROM ubuntu
MAINTAINER keshav.kummari@gmail.com

RUN apt-get update
RUN apt-get install –y nginx
CMD [“echo”,”Image created”]

docker build -t dev:1.0 .

# docker images

You can upload an image to public repository.

STEP-1 : Log into Docker Hub and create your repository.

This is the repository where your image will be stored.

Go to https://hub.docker.com/ and log in with your credentials.

STEP-2 : Click the button "Create Repository" on the above screen and create
a repository with the name kkummari.

Make sure that the visibility of the repository is public.

Once the repository is created, make a note of the pull command which is attached to the repository.

# docker pull kkumari/dev01

STEP-3 : Now go back to the Docker Host.

Here we need to tag our myimage to the new repository created in Docker Hub.

We can do this via the Docker tag command.

STEP-4 : Issue the Docker login command to login into the Docker Hub repository
from the command prompt.

The Docker login command will prompt you for the username and password to the Docker Hub repository.

STEP-5 : Once the image has been tagged, it’s now time to push the image to the Docker Hub repository.
We can do this via the Docker push command.

# docker tag imageID Repositoryname

imageID − This is the ImageID which needs to be tagged to the repository.

Repositoryname − This is the repository name to which the ImageID needs to be tagged to.

# docker tag ab0c1d3744dd kkummari/dev01:1.0

STEP-6 : Push the Docker file to Docker Hub:

# docker push Repositoryname

Repositoryname − This is the repository name which needs to be pushed to the Docker Hub.

The long ID of the repository pushed to Docker Hub.

# docker push kkummari/dev01:1.0

STEP-7 : If you go back to the Docker Hub page and go to your repository,
you will see the tag name in the repository.

STEP-8 : Now let’s try to pull the repository we uploaded onto our Docker host.
Let’s first delete the images, kkummari:0.1 and kkummari/dev01:1.0, from the local Docker host.
Let’s use the Docker pull command to pull the repository from the Docker Hub.

Note :
Docker pull command has taken our new repository from the Docker Hub and placed it on our machine.

#------------------------------------------------------------------------------#
Docker - Managing Ports :
#------------------------------------------------------------------------------#
In Docker, the containers themselves can have applications running on ports.

When you run a container, if you want to access the application in the container
 via a port number, you need to map the port number of the container to the port number of the Docker host.

In our example, we are going to download the Jenkins container from Docker Hub.
We are then going to map the Jenkins port number to the port number on the Docker host.


STEP-1 : First, you need to do a simple sign-up on Docker Hub.

STEP-2 : Next, let’s browse and find the Jenkins image.

STEP-3 : If you scroll down on the same page, you can see the Docker pull command.
This will be used to download the Jenkins Image onto the local MacOS.

STEP-4 : Now go to the MacOS and run the command :

# docker pull jenkins

STEP-5 : To understand what ports are exposed by the container,
you should use the Docker inspect command to inspect the image.

# docker inspect Container/Image
The low-level information of the image or container in JSON format.

# docker inspect jenkins

STEP-6 :
The output of the inspect command gives a JSON output.

If we observe the output, we can see that there is a section of "ExposedPorts"
and see that there are two ports mentioned.

One is the data port of 8080 and the other is the control port of 50000.

To run Jenkins and map the ports, you need to change the Docker run command and
add the ‘p’ option which specifies the port mapping.

# docker run -p 8080:8080 -p 50000:50000 jenkins

The left-hand side of the port number mapping is the Docker host port to map to
and the right-hand side is the Docker container port number.

When you open the browser and navigate to the Docker host on port 8080,
you will see Jenkins up and running.


#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#


#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
